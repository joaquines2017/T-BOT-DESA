import { addKeyword } from '@builderbot/bot';
import { handleCreateTicket } from '../controllers/ticketController';
import { text } from 'stream/consumers';

const tecnicos = [
    { id: 68, nombre: 'Néstor' },
    { id: 72, nombre: 'Ariel Medina' },
    { id: 53, nombre: 'Ale' },
    { id: 59, nombre: 'Jose' },
    { id: 51, nombre: 'Ariel' },
    { id: 28, nombre: 'Santiago' },
    { id: 11, nombre: 'Miguel' },
    { id: 60, nombre: 'Mariano' },
    { id: 54, nombre: 'Rodri' },
];

export const flowCrearTicket = addKeyword(['1'])
    .addAnswer('Bienvenido al sistema de creación de tickets. ¿Qué tipo de problema tienes?', { capture: true })
    .addAnswer('Por favor, proporciona una breve descripción del problema:', { capture: true })
    .addAction(async (ctx, { flowDynamic }) => {
        try {
            // Capturamos las respuestas del usuario desde `ctx.body`
            const problemType = ctx.bot.text[0].trim();  // Primera respuesta: tipo de problema
            const description = ctx.body.text[1].trim();  // Segunda respuesta: descripción del problema
console.log(problemType);
console.log('Contenido de ctx.body:', ctx[0]);
            // Verificamos que ambas respuestas existan y no estén vacías
            if (!problemType || !description) {
                await flowDynamic('❌ No se pudieron capturar todos los datos. Inténtalo de nuevo.');
                return;
            }

            // Asignación aleatoria de técnico
            const tecnicoAsignado = tecnicos[Math.floor(Math.random() * tecnicos.length)];

            // Creamos el subject para el ticket
            const subjectD = `Problema: ${problemType} - Detalles: ${description}`;

            // Creamos el ticket utilizando la función del controlador
            const ticket = await handleCreateTicket({
                authorId: 55,  // Este es el ID del creador del ticket, ajustalo según corresponda
                projectId: 33, // Este es el ID del proyecto, ajustalo según corresponda
                trackerId: 26, // Ajusta este ID según corresponda
                assignedToId: tecnicoAsignado.id,  // Asignamos aleatoriamente el técnico
                priorityId: 2,  // Ajusta según la prioridad del ticket
                statusId: 7,  // Ajusta el estado del ticket
                subject: `${subjectD}`,
                description: `Tipo de problema: ${problemType}. Descripción: ${description}.`,
                //description: null,
            });

            if (ticket) {
                await flowDynamic(
                    `✅ Ticket creado con éxito.\n\nID del ticket: ${ticket.id}\nTécnico asignado: ${tecnicoAsignado.nombre}.`
                );
            } else {
                await flowDynamic('❌ No se pudo crear el ticket. Inténtalo más tarde.');
            }
        } catch (error) {
            console.error('Error al crear el ticket:', error);
            await flowDynamic('❌ Ocurrió un error inesperado. Inténtalo más tarde.');
        }
    });
